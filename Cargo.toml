[package]
authors = ["Alex M. M. <acdenissk69@gmail.com>"]
description = "A Rust library for the Discord API."
documentation = "https://docs.rs/serenity"
homepage = "https://github.com/serenity-rs/serenity"
keywords = ["discord", "api"]
license = "ISC"
name = "serenity"
readme = "README.md"
repository = "https://github.com/serenity-rs/serenity.git"
version = "0.11.6"
edition = "2021"
rust-version = "1.64"
include = ["src/**/*", "LICENSE.md", "README.md", "CHANGELOG.md", "build.rs"]

[workspace]
members = ["examples/*"]

[dependencies]
# Required dependencies
bitflags = "1.3"
serde_json = "1.0.75"
async-trait = "0.1.54"
tracing = { version = "0.1.23", features = ["log"] }
serde = { version = "1.0.130", features = ["derive"] }
url = { version = "^2.1", features = ["serde"] }
tokio = { version = "1", features = ["fs", "macros", "rt", "sync", "time", "io-util"] }
futures = { version = "0.3", default-features = false, features = ["std"] }
dep_time = { version = "0.3.6", package = "time", features = ["formatting", "parsing", "serde-well-known"] }
# Optional dependencies
fxhash = { version = "0.2.1", optional = true }
nougat = { version = "0.2.0", optional = true }
derivative = { version = "2.2.0", optional = true }
simd-json = { version = "0.6", optional = true }
uwl = { version = "0.6.0", optional = true }
base64 = { version = "0.13", optional = true }
levenshtein = { version = "1.0.5", optional = true }
chrono = { version = "0.4.22", default-features = false, features = ["clock", "serde"], optional = true }
flate2 = { version = "1.0.13", optional = true }
reqwest = { version = "0.11.7", default-features = false, features = ["multipart", "stream"], optional = true }
static_assertions = { version = "1.1", optional = true }
tokio-tungstenite = { version = "0.17", optional = true }
typemap_rev = { version = "0.1.3", optional = true }
bytes = { version = "1.0", optional = true }
percent-encoding = { version = "2.1", optional = true }
moka = { version = "0.9", default-features = false, features = ["dash"], optional = true }
mime_guess = { version = "2.0", optional = true }
dashmap = { version = "5.1.0", features = ["serde"], optional = true }
parking_lot = { version = "0.12", optional = true }
ed25519-dalek = { version = "1.0.1", optional = true }
# Serenity workspace crates
command_attr = { version = "0.4.2", path = "./command_attr", optional = true }
serenity-voice-model = { version = "0.1.1", path = "./voice-model", optional = true }

[dev-dependencies.http_crate]
version = "0.2"
package = "http"

[features]
# Defaults with different backends
default = ["default_no_backend", "rustls_backend"]
default_native_tls = ["default_no_backend", "native_tls_backend"]

# Serenity requires a backend, this picks all default features without a backend.
default_no_backend = [
    "builder",
    "cache",
    "chrono",
    "client",
    "framework",
    "gateway",
    "model",
    "http",
    "standard_framework",
    "utils",
]

# Enables builder structs to configure Discord HTTP requests. Without this feature, you have to
# construct JSON manually at some places.
builder = ["base64"]
# Enables the cache, which stores the data received from Discord gateway to provide access to
# complete guild data, channels, users and more without needing HTTP requests.
cache = ["fxhash", "dashmap", "parking_lot"]
# Enables collectors, a utility feature that lets you await interaction events in code with
# zero setup, without needing to setup an InteractionCreate event listener.
collector = ["gateway", "model", "derivative", "nougat"]
# Wraps the gateway and http functionality into a single interface
# TODO: should this require "gateway"?
client = ["http", "typemap_rev"]
# Enables the Framework trait which is an abstraction for old-style text commands.
framework = ["client", "model", "utils"]
# Enables gateway support, which allows bots to listen for Discord events.
gateway = ["flate2"]
# Enables HTTP, which enables bots to execute actions on Discord.
http = ["mime_guess", "percent-encoding"]
absolute_ratelimits = ["http"]
# Enables wrapper methods around HTTP requests on model types.
# Requires "builder" to configure the requests and "http" to execute them.
# Note: the model type definitions themselves are always active, regardless of this feature.
# TODO: remove dependeny on utils feature
model = ["builder", "http", "utils"]
voice_model = ["serenity-voice-model"]
standard_framework = ["framework", "uwl", "levenshtein", "command_attr", "static_assertions", "parking_lot"]
# Enables support for Discord API functionality that's not stable yet, as well as serenity APIs that
# are allowed to change even in semver non-breaking updates.
unstable_discord_api = []
# Enables some utility functions that can be useful for bot creators.
utils = []
voice = ["client", "model"]
tokio_task_builder = ["tokio/tracing"]
# Configures serenity to use types from the `time` crate to store datetimes.
time = []
interactions_endpoint = ["ed25519-dalek"]

# Note: all feature-gated APIs to be documented should have their features listed here!
_docs = ["default", "collector", "unstable_discord_api", "voice", "voice_model", "interactions_endpoint"]

# Enables simd accelerated parsing.
simd_json = ["simd-json"]

# Enables temporary caching in functions that retrieve data via the HTTP API.
temp_cache = ["cache", "moka"]

# Backends to pick from:
# - Rustls Backends
rustls_backend = [
    "reqwest/rustls-tls",
    "tokio-tungstenite/rustls-tls-webpki-roots",
    "bytes",
]

# - Native TLS Backends
native_tls_backend = [
    "reqwest/native-tls",
    "tokio-tungstenite/native-tls",
    "bytes",
]


[package.metadata.docs.rs]
features = ["_docs"]
rustdoc-args = ["--cfg", "docsrs"]
