name: CI

on: [push, pull_request]

env:
  minrust: 1.48.0

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}

    strategy:
      fail-fast: false
      matrix:
        name:
          - stable
          - beta
          - nightly
          - macOS
          - Windows
          - no cache
          - no gateway
          - unstable Discord API features
          - rustls tokio 0.2
          - native-tls tokio 0.2

        include:
          - name: beta
            toolchain: beta
          - name: nightly
            toolchain: nightly
          - name: macOS
            os: macOS-latest
          - name: Windows
            os: windows-latest
          - name: no cache
            features: builder client framework gateway model http standard_framework utils rustls_backend
          - name: no gateway
            features: model http rustls_backend
          - name: unstable Discord API features
            features: default unstable_discord_api
            dont-test: true
          - name: rustls tokio 0.2
            features: default_tokio_0_2
            dont-test: true
          - name: native-tls tokio 0.2
            features: default_native_tls_tokio_0_2
            dont-test: true

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        id: tc
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain || 'stable' }}
          profile: minimal
          override: true

      - name: Install dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libopus-dev

      - name: Setup cache
        if: runner.os != 'macOS'
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-test-${{ steps.tc.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.toml') }}

      - name: Build all features
        if: matrix.features == ''
        run: cargo build --all-features

      - name: Test all features
        if: matrix.features == ''
        run: cargo test --all-features

      - name: Build some features
        if: matrix.features
        run: cargo build --no-default-features --features "${{ matrix.features }}"

      - name: Test some features
        if: ${{ !matrix.dont-test && matrix.features }}
        run: cargo test --no-default-features --features "${{ matrix.features }}"

      - name: Check minimal versions
        if: matrix.toolchain == 'nightly'
        run: cargo clean; cargo update -Z minimal-versions; cargo check

  clippy:
    name: Run clippy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        id: tc
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libopus-dev

      - name: Setup cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-clippy-${{ steps.tc.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.toml') }}

      - run: cargo clippy

  MSRV:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain (${{ env.minrust }})
        id: tc
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.minrust }}
          profile: minimal
          override: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libopus-dev

      - name: Setup cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-msrv-${{ steps.tc.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.toml') }}

      - run: cargo check --all-features

  doc:
    name: Build docs
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        id: tc
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libopus-dev

      - name: Setup cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-docs-${{ steps.tc.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.toml') }}

      - name: Build docs
        env:
          RUSTDOCFLAGS: -D broken_intra_doc_links
        run: |
          cargo doc --no-deps --features collector,voice,unstable_discord_api
          cargo doc --no-deps -p command_attr

  examples:
    name: Examples
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        id: tc
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libopus-dev

      - name: Setup cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            examples/target
          key: ${{ runner.os }}-examples-${{ steps.tc.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.toml') }}

      - name: 'Build example 1'
        working-directory: examples
        run: cargo build -p e01_basic_ping_bot
      - name: 'Build example 2'
        working-directory: examples
        run: cargo build -p e02_transparent_guild_sharding
      - name: 'Build example 3'
        working-directory: examples
        run: cargo build -p e03_struct_utilities
      - name: 'Build example 4'
        working-directory: examples
        run: cargo build -p e04_message_builder
      - name: 'Build example 5'
        working-directory: examples
        run: cargo build -p e05_command_framework
      - name: 'Build example 6'
        working-directory: examples
        run: cargo build -p e06_sample_bot_structure
      - name: 'Build example 7'
        working-directory: examples
        run: cargo build -p e07_env_logging
      - name: 'Build example 8'
        working-directory: examples
        run: cargo build -p e08_shard_manager
      - name: 'Build example 9'
        working-directory: examples
        run: cargo build -p e09_create_message_builder
      - name: 'Build example 10'
        working-directory: examples
        run: cargo build -p e10_collectors
      - name: 'Build example 11'
        working-directory: examples
        run: cargo build -p e11_gateway_intents
      - name: 'Build example 12'
        working-directory: examples
        run: cargo build -p e12_global_data
      - name: 'Build example 13'
        working-directory: examples
        run: cargo build -p e13_parallel_loops
